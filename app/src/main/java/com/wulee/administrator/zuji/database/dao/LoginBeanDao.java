package com.wulee.administrator.zuji.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wulee.administrator.zuji.database.bean.LoginBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_TABLE".
*/
public class LoginBeanDao extends AbstractDao<LoginBean, Void> {

    public static final String TABLENAME = "LOGIN_TABLE";

    /**
     * Properties of entity LoginBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Mobile = new Property(0, String.class, "mobile", false, "MOBILE");
        public final static Property Current_uid = new Property(1, Long.class, "current_uid", false, "CURRENT_UID");
        public final static Property Logining = new Property(2, Boolean.class, "logining", false, "LOGINING");
        public final static Property Session = new Property(3, String.class, "session", false, "SESSION");
    };


    public LoginBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_TABLE\" (" + //
                "\"MOBILE\" TEXT," + // 0: mobile
                "\"CURRENT_UID\" INTEGER UNIQUE ," + // 1: current_uid
                "\"LOGINING\" INTEGER," + // 2: logining
                "\"SESSION\" TEXT);"); // 3: session
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoginBean entity) {
        stmt.clearBindings();
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(1, mobile);
        }
 
        Long current_uid = entity.getCurrent_uid();
        if (current_uid != null) {
            stmt.bindLong(2, current_uid);
        }
 
        Boolean logining = entity.getLogining();
        if (logining != null) {
            stmt.bindLong(3, logining ? 1L: 0L);
        }
 
        String session = entity.getSession();
        if (session != null) {
            stmt.bindString(4, session);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LoginBean readEntity(Cursor cursor, int offset) {
        LoginBean entity = new LoginBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mobile
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // current_uid
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // logining
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // session
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoginBean entity, int offset) {
        entity.setMobile(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCurrent_uid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLogining(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setSession(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LoginBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LoginBean entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
